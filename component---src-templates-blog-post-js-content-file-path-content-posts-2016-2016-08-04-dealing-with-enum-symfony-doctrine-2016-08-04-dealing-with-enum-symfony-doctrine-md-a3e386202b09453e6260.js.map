{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-content-posts-2016-2016-08-04-dealing-with-enum-symfony-doctrine-2016-08-04-dealing-with-enum-symfony-doctrine-md-a3e386202b09453e6260.js","mappings":"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","sources":["webpack://maxpou.fr/./content/posts/2016/2016-08-04-dealing-with-enum-symfony-doctrine/2016-08-04-dealing-with-enum-symfony-doctrine.md","webpack://maxpou.fr/./src/templates/blog-post.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    em: \"em\",\n    strong: \"strong\",\n    br: \"br\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Using Enum in a Symfony App isn’t obvious. If your Enum is short, you can directly put it on your\\nentity. But if it grows, it will be quickly unmanageable.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"the-problem\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#the-problem\",\n    \"aria-label\": \"the problem permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"The problem\"), \"\\n\", React.createElement(_components.p, null, \"Ok given, you want to create a message object which contains an attribute called \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">type</code>\"\n    }\n  }), \". Like\\n\", React.createElement(_components.a, {\n    href: \"http://getbootstrap.com/components/#alerts\"\n  }, \"Twitter Bootstrap’s Alert\"), \", your Message type’s\\nattribute must contain some specific strings (e.g. info, success…).\"), \"\\n\", React.createElement(_components.p, null, \"In the\\n\", React.createElement(_components.a, {\n    href: \"http://doctrine2.readthedocs.io/en/latest/cookbook/mysql-enums.html\"\n  }, \"official documentation\"), \",\\nDoctrine provides 2 solutions for MySQL Database. What happens if we want to use another Database\\nlike PostgreSQL? By the way, you can also take a look at these solutions. As far as I am concerned,\\nI don’t like them because it didn’t solve the problem on the \", React.createElement(_components.em, null, \"PHP side\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Obviously, we can also create a Table called MessageType. But according to me, a database table must\\nbe used to store data. In this case, a type isn’t managed by a human.\"), \"\\n\", React.createElement(_components.p, null, \"So we need custom \", React.createElement(_components.strong, null, \"reusable\"), \" PHP Enum.\", React.createElement(_components.br), \"\\n\", \"Let’s do this!\"), \"\\n\", React.createElement(_components.img, {\n    src: \"/75d6f9ce18b92e60d1d799847cb7d0bf/ship-kid.gif\",\n    alt: \"a kid on a ship\"\n  }), \"\\n\", React.createElement(_components.h2, {\n    id: \"a-solution\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#a-solution\",\n    \"aria-label\": \"a solution permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"A solution\"), \"\\n\", React.createElement(_components.p, null, \"First, you need to create a MessageTypeEnum.\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"php\\\"><pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token php language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">DemoBundle<span class=\\\"token punctuation\\\">\\\\</span>Enum</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">abstract</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name-definition class-name\\\">MessageTypeEnum</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">TYPE_INFO</span>    <span class=\\\"token operator\\\">=</span> <span class=\\\"token string double-quoted-string\\\">\\\"info\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">TYPE_WARNING</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string double-quoted-string\\\">\\\"warning\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">TYPE_SUCCESS</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string double-quoted-string\\\">\\\"success\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">TYPE_DANGER</span>  <span class=\\\"token operator\\\">=</span> <span class=\\\"token string double-quoted-string\\\">\\\"danger\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/** @var array user friendly named type */</span>\\n    <span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token variable\\\">$typeName</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token keyword static-context\\\">self</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_INFO</span>    <span class=\\\"token operator\\\">=></span> <span class=\\\"token string single-quoted-string\\\">'Information'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword static-context\\\">self</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_WARNING</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token string single-quoted-string\\\">'Attention'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword static-context\\\">self</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_SUCCESS</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token string single-quoted-string\\\">'Succès'</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword static-context\\\">self</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_DANGER</span>  <span class=\\\"token operator\\\">=></span> <span class=\\\"token string single-quoted-string\\\">'Danger'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * @param  string $typeShortName\\n     * @return string\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function-definition function\\\">getTypeName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$typeShortName</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">isset</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword static-context\\\">static</span><span class=\\\"token operator\\\">::</span><span class=\\\"token variable\\\">$typeName</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">$typeShortName</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string double-quoted-string\\\">\\\"Unknown type (<span class=\\\"token interpolation\\\"><span class=\\\"token variable\\\">$typeShortName</span></span>)\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword static-context\\\">static</span><span class=\\\"token operator\\\">::</span><span class=\\\"token variable\\\">$typeName</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token variable\\\">$typeShortName</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * @return array&lt;string>\\n     */</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function-definition function\\\">getAvailableTypes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n            <span class=\\\"token keyword static-context\\\">self</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_INFO</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword static-context\\\">self</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_WARNING</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword static-context\\\">self</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_SUCCESS</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token keyword static-context\\\">self</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_DANGER</span>\\n        <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Here is an example of use:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"php\\\"><pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token php language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token keyword\\\">echo</span> <span class=\\\"token class-name static-context\\\">MessageTypeEnum</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_INFO</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//info</span>\\n<span class=\\\"token keyword\\\">echo</span> <span class=\\\"token class-name static-context\\\">MessageTypeEnum</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">getTypeName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name static-context\\\">MessageTypeEnum</span><span class=\\\"token operator\\\">::</span><span class=\\\"token constant\\\">TYPE_INFO</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">//Information</span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"Now, you need to adapt your Entity:\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"php\\\"><pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token php language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name-definition class-name\\\">Message</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">/**\\n     * @var string\\n     * @ORM\\\\Column(name=\\\"type\\\", type=\\\"string\\\", length=255, nullable=false)\\n     */</span>\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token variable\\\">$type</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">//...</span>\\n\\n    <span class=\\\"token comment\\\">/**\\n     * @param string $type\\n     * @return Message\\n     */</span>\\n     <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function-definition function\\\">setType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$type</span><span class=\\\"token punctuation\\\">)</span>\\n     <span class=\\\"token punctuation\\\">{</span>\\n         <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token function\\\">in_array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$type</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name static-context\\\">MessageTypeEnum</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">getAvailableTypes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n             <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name class-name-fully-qualified\\\"><span class=\\\"token punctuation\\\">\\\\</span>InvalidArgumentException</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string double-quoted-string\\\">\\\"Invalid type\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n         <span class=\\\"token punctuation\\\">}</span>\\n\\n         <span class=\\\"token variable\\\">$this</span><span class=\\\"token operator\\\">-></span><span class=\\\"token property\\\">type</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token variable\\\">$type</span><span class=\\\"token punctuation\\\">;</span>\\n\\n         <span class=\\\"token keyword\\\">return</span> <span class=\\\"token variable\\\">$this</span><span class=\\\"token punctuation\\\">;</span>\\n     <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"And this is the form: (\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MessageType.php</code>\"\n    }\n  }), \")\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"php\\\"><pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token php language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function-definition function\\\">buildForm</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name type-declaration\\\">FormBuilderInterface</span> <span class=\\\"token variable\\\">$builder</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword type-hint\\\">array</span> <span class=\\\"token variable\\\">$options</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token variable\\\">$builder</span>\\n        <span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string single-quoted-string\\\">'content'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token operator\\\">-></span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string single-quoted-string\\\">'type'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string single-quoted-string\\\">'choice'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">array</span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string single-quoted-string\\\">'required'</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token constant boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string single-quoted-string\\\">'choices'</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token class-name static-context\\\">MessageTypeEnum</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">getAvailableTypes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string single-quoted-string\\\">'choices_as_values'</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token constant boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n            <span class=\\\"token string single-quoted-string\\\">'choice_label'</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$choice</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token class-name static-context\\\">MessageTypeEnum</span><span class=\\\"token operator\\\">::</span><span class=\\\"token function\\\">getTypeName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token variable\\\">$choice</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"And tadaaa it works!\"), \"\\n\", React.createElement(_components.p, null, \"Your Form should look like this:\"), \"\\n\", React.createElement(\"div\", {\n    class: \"notice\"\n  }, React.createElement(\"form\", null, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"demobundle_message[content]\"\n  }), React.createElement(\"br\"), React.createElement(\"select\", {\n    name: \"type\",\n    name: \"demobundle_message[type]\"\n  }, React.createElement(\"option\", {\n    value: \"info\"\n  }, \"Information\"), React.createElement(\"option\", {\n    value: \"warning\"\n  }, \"Attention\"), React.createElement(\"option\", {\n    value: \"success\"\n  }, \"Succès\"), React.createElement(\"option\", {\n    value: \"danger\"\n  }, \"Danger\")))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/maxpou.fr/maxpou.fr/content/posts/2016/2016-08-04-dealing-with-enum-symfony-doctrine/2016-08-04-dealing-with-enum-symfony-doctrine.md\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../components/Layout';\nimport Wrapper from '../components/Wrapper';\nimport Hero from '../components/Hero';\nimport Article from '../components/Article';\nimport PrevNextPost from '../components/PrevNextPost';\nimport SEO from '../components/SEO';\nimport Webmentions from '../components/Webmentions';\nfunction BlogPostTemplate({data, pageContext, children, location}) {\n  const post = data.post;\n  const {previous, next} = pageContext;\n  return React.createElement(Layout, {\n    location: location\n  }, React.createElement(SEO, {\n    title: post.frontmatter.title,\n    description: post.frontmatter.description || post.excerpt,\n    cover: post.frontmatter.cover && post.frontmatter.cover.publicURL,\n    imageShare: post.frontmatter.imageShare && post.frontmatter.imageShare.publicURL,\n    lang: post.frontmatter.language,\n    translations: post.frontmatter.translations,\n    path: post.frontmatter.slug,\n    isBlogPost: true\n  }), React.createElement(Hero, {\n    heroImg: post.frontmatter.cover,\n    title: post.frontmatter.title\n  }), React.createElement(Wrapper, null, React.createElement(Article, {\n    post: post\n  }, children)), React.createElement(Wrapper, {\n    as: \"aside\"\n  }, React.createElement(Webmentions, {\n    slug: post.frontmatter.slug,\n    title: post.frontmatter.title,\n    redditPostId: post.frontmatter.redditPostId\n  })), React.createElement(PrevNextPost, {\n    previous: previous,\n    next: next\n  }));\n}\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    post: mdx(frontmatter: { slug: { eq: $slug } }) {\n      excerpt\n      frontmatter {\n        title\n        date\n        slug\n        language\n        tags\n        description\n        cover {\n          publicURL\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n        imageShare {\n          publicURL\n        }\n        translations {\n          language\n          link\n          hreflang\n        }\n        redditPostId\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","a","span","em","strong","br","img","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","src","alt","class","type","name","value","wrapper","MDXLayout","BlogPostTemplate","_ref","data","pageContext","children","location","post","previous","next","Layout","SEO","title","frontmatter","description","excerpt","cover","publicURL","imageShare","lang","language","translations","path","slug","isBlogPost","Hero","heroImg","Wrapper","Article","as","Webmentions","redditPostId","PrevNextPost","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}