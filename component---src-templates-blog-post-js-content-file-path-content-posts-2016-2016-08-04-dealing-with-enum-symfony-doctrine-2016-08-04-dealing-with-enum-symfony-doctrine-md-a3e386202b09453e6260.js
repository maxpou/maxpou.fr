"use strict";(self.webpackChunkmaxpou_fr=self.webpackChunkmaxpou_fr||[]).push([[2339],{675:function(n,s,a){a.r(s),a.d(s,{default:function(){return g}});var t=a(1151),e=a(7294);function p(n){const s=Object.assign({p:"p",h2:"h2",a:"a",span:"span",em:"em",strong:"strong",br:"br",img:"img"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"Using Enum in a Symfony App isn’t obvious. If your Enum is short, you can directly put it on your\nentity. But if it grows, it will be quickly unmanageable."),"\n",e.createElement(s.h2,{id:"the-problem",style:{position:"relative"}},e.createElement(s.a,{href:"#the-problem","aria-label":"the problem permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"The problem"),"\n",e.createElement(s.p,null,"Ok given, you want to create a message object which contains an attribute called ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">type</code>'}}),". Like\n",e.createElement(s.a,{href:"http://getbootstrap.com/components/#alerts"},"Twitter Bootstrap’s Alert"),", your Message type’s\nattribute must contain some specific strings (e.g. info, success…)."),"\n",e.createElement(s.p,null,"In the\n",e.createElement(s.a,{href:"http://doctrine2.readthedocs.io/en/latest/cookbook/mysql-enums.html"},"official documentation"),",\nDoctrine provides 2 solutions for MySQL Database. What happens if we want to use another Database\nlike PostgreSQL? By the way, you can also take a look at these solutions. As far as I am concerned,\nI don’t like them because it didn’t solve the problem on the ",e.createElement(s.em,null,"PHP side"),"."),"\n",e.createElement(s.p,null,"Obviously, we can also create a Table called MessageType. But according to me, a database table must\nbe used to store data. In this case, a type isn’t managed by a human."),"\n",e.createElement(s.p,null,"So we need custom ",e.createElement(s.strong,null,"reusable")," PHP Enum.",e.createElement(s.br),"\n","Let’s do this!"),"\n",e.createElement(s.img,{src:"/75d6f9ce18b92e60d1d799847cb7d0bf/ship-kid.gif",alt:"a kid on a ship"}),"\n",e.createElement(s.h2,{id:"a-solution",style:{position:"relative"}},e.createElement(s.a,{href:"#a-solution","aria-label":"a solution permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"A solution"),"\n",e.createElement(s.p,null,"First, you need to create a MessageTypeEnum."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">DemoBundle<span class="token punctuation">\\</span>Enum</span><span class="token punctuation">;</span>\n\n<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MessageTypeEnum</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token constant">TYPE_INFO</span>    <span class="token operator">=</span> <span class="token string double-quoted-string">"info"</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token constant">TYPE_WARNING</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"warning"</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token constant">TYPE_SUCCESS</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"success"</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token constant">TYPE_DANGER</span>  <span class="token operator">=</span> <span class="token string double-quoted-string">"danger"</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/** @var array user friendly named type */</span>\n    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token variable">$typeName</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">TYPE_INFO</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">\'Information\'</span><span class="token punctuation">,</span>\n        <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">TYPE_WARNING</span> <span class="token operator">=></span> <span class="token string single-quoted-string">\'Attention\'</span><span class="token punctuation">,</span>\n        <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">TYPE_SUCCESS</span> <span class="token operator">=></span> <span class="token string single-quoted-string">\'Succès\'</span><span class="token punctuation">,</span>\n        <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">TYPE_DANGER</span>  <span class="token operator">=></span> <span class="token string single-quoted-string">\'Danger\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/**\n     * @param  string $typeShortName\n     * @return string\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getTypeName</span><span class="token punctuation">(</span><span class="token variable">$typeShortName</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token variable">$typeName</span><span class="token punctuation">[</span><span class="token variable">$typeShortName</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token string double-quoted-string">"Unknown type (<span class="token interpolation"><span class="token variable">$typeShortName</span></span>)"</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token variable">$typeName</span><span class="token punctuation">[</span><span class="token variable">$typeShortName</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * @return array&lt;string>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getAvailableTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">TYPE_INFO</span><span class="token punctuation">,</span>\n            <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">TYPE_WARNING</span><span class="token punctuation">,</span>\n            <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">TYPE_SUCCESS</span><span class="token punctuation">,</span>\n            <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">TYPE_DANGER</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Here is an example of use:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">echo</span> <span class="token class-name static-context">MessageTypeEnum</span><span class="token operator">::</span><span class="token constant">TYPE_INFO</span><span class="token punctuation">;</span>\n<span class="token comment">//info</span>\n<span class="token keyword">echo</span> <span class="token class-name static-context">MessageTypeEnum</span><span class="token operator">::</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token class-name static-context">MessageTypeEnum</span><span class="token operator">::</span><span class="token constant">TYPE_INFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//Information</span></span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Now, you need to adapt your Entity:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Message</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * @var string\n     * @ORM\\Column(name="type", type="string", length=255, nullable=false)\n     */</span>\n    <span class="token keyword">private</span> <span class="token variable">$type</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//...</span>\n\n    <span class="token comment">/**\n     * @param string $type\n     * @return Message\n     */</span>\n     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setType</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span>\n     <span class="token punctuation">{</span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token class-name static-context">MessageTypeEnum</span><span class="token operator">::</span><span class="token function">getAvailableTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>InvalidArgumentException</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Invalid type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token punctuation">}</span>\n\n         <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">type</span> <span class="token operator">=</span> <span class="token variable">$type</span><span class="token punctuation">;</span>\n\n         <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"And this is the form: (",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MessageType.php</code>'}}),")"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">buildForm</span><span class="token punctuation">(</span><span class="token class-name type-declaration">FormBuilderInterface</span> <span class="token variable">$builder</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token variable">$builder</span>\n        <span class="token operator">-></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'content\'</span><span class="token punctuation">)</span>\n        <span class="token operator">-></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'type\'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">\'choice\'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>\n            <span class="token string single-quoted-string">\'required\'</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">\'choices\'</span> <span class="token operator">=></span> <span class="token class-name static-context">MessageTypeEnum</span><span class="token operator">::</span><span class="token function">getAvailableTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">\'choices_as_values\'</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">\'choice_label\'</span> <span class="token operator">=></span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$choice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> <span class="token class-name static-context">MessageTypeEnum</span><span class="token operator">::</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token variable">$choice</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">;</span>\n<span class="token punctuation">}</span></span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"And tadaaa it works!"),"\n",e.createElement(s.p,null,"Your Form should look like this:"),"\n",e.createElement("div",{class:"notice"},e.createElement("form",null,e.createElement("input",{type:"text",name:"demobundle_message[content]"}),e.createElement("br"),e.createElement("select",{name:"type",name:"demobundle_message[type]"},e.createElement("option",{value:"info"},"Information"),e.createElement("option",{value:"warning"},"Attention"),e.createElement("option",{value:"success"},"Succès"),e.createElement("option",{value:"danger"},"Danger")))))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},c=a(4222),l=a(418),r=a(4529),i=a(7953),u=a(4849),k=a(5536),m=a(2404);function d(n){let{data:s,pageContext:a,children:t,location:p}=n;const o=s.post,{previous:d,next:g}=a;return e.createElement(c.Z,{location:p},e.createElement(k.Z,{title:o.frontmatter.title,description:o.frontmatter.description||o.excerpt,cover:o.frontmatter.cover&&o.frontmatter.cover.publicURL,imageShare:o.frontmatter.imageShare&&o.frontmatter.imageShare.publicURL,lang:o.frontmatter.language,translations:o.frontmatter.translations,path:o.frontmatter.slug,isBlogPost:!0}),e.createElement(r.Z,{heroImg:o.frontmatter.cover,title:o.frontmatter.title}),e.createElement(l.Z,null,e.createElement(i.Z,{post:o},t)),e.createElement(l.Z,{as:"aside"},e.createElement(m.Z,{slug:o.frontmatter.slug,title:o.frontmatter.title,redditPostId:o.frontmatter.redditPostId})),e.createElement(u.Z,{previous:d,next:g}))}function g(n){return e.createElement(d,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-content-posts-2016-2016-08-04-dealing-with-enum-symfony-doctrine-2016-08-04-dealing-with-enum-symfony-doctrine-md-a3e386202b09453e6260.js.map