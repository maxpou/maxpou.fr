---
import type { CollectionEntry } from 'astro:content'

import FormattedDate from '../components/FormattedDate.astro'
import HeroImage from '../components/HeroImage.astro'
import Layout from '../components/Layout.astro'
import PageTitle from '../components/PageTitle.astro'
import Tag from '../components/Tag.astro'
import StructuredData from '../components/StructuredData.astro'
import RelatedPosts from '../components/RelatedPosts.astro'
import { SITE_OWNER, SITE_URL } from '../consts'
import { getCollection } from 'astro:content'
import type { JsonLdDocument } from 'jsonld'

type Props = CollectionEntry<'blog'>
type Translations = CollectionEntry<'blog'>['data']['translations']

function formatBlogTranslation(
  translations: Translations,
): { url: string; lang: string }[] {
  return (
    translations
      ?.filter(t => t.hreflang !== undefined)
      .map(t => ({
        lang: t.hreflang || 'en',
        url: t.link.startsWith('../')
          ? `${Astro.url.origin}${t.link.replace('../', '/blog/')}/`
          : t.link,
      })) || []
  )
}

const { data, slug } = Astro.props
const {
  title,
  description,
  date,
  modified,
  cover,
  translations,
  language,
  tags,
} = data

const formattedTranslations = formatBlogTranslation(translations)

// Get all posts for related posts
const allPosts = (await getCollection('blog')).filter(
  post => !post.data.unlisted,
)

const articleStructuredData: JsonLdDocument = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: title,
  description: description,
  author: {
    '@type': 'Person',
    name: SITE_OWNER,
    url: SITE_URL,
  },
  publisher: {
    '@type': 'Organization',
    name: SITE_OWNER,
    logo: {
      '@type': 'ImageObject',
      url: `${SITE_URL}/android-chrome-192x192.png`,
    },
  },
  datePublished: date.toISOString(),
  dateModified: modified ? modified.toISOString() : date.toISOString(),
  image: cover ? `${SITE_URL}${cover}` : undefined,
  url: Astro.url.toString(),
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': Astro.url.toString(),
  },
  keywords: tags.join(', '),
  articleSection: 'Blog',
}
---

<Layout
  title={title}
  description={description || `A blog post written by ${SITE_OWNER}`}
  lang={language}
  translations={formattedTranslations}
  seo={{
    type: 'article',
    ogImage: `/og/${slug}.png`,
  }}
>
  <StructuredData data={articleStructuredData} />
  <article>
    <HeroImage alt={`Cover for ${title}`} src={cover} />
    <div class="container m-auto text-center">
      <div class="mt-3 text-blueGreyed dark:text-gray-300">
        <FormattedDate date={date} />
        {
          modified && (
            <span>
              - Last updated on <FormattedDate date={modified} />
            </span>
          )
        }
      </div>
      <PageTitle>{title}</PageTitle>
      <div class="pb-6">
        {
          tags.map(tag => {
            return (
              <Tag name={tag} link={`/tags/${tag}`} />
            )
          })
        }
        {
          translations && (
            <div class="text-md rounded-lg border border-darkBlue bg-lightYellow p-3 text-left mt-5 dark:text-gray-600 m-auto w-[720px] max-w-full">
              This article also exists in:{' '}
              {translations.map((translation, i) => {
                return (
                  <Fragment key={`translation-${i}`}>
                    <a href={translation.link} class="underline">{translation.language}</a>{i < translations.length - 1 ? ', ' : ''}
                  </Fragment>
                )
              })}
            </div>
          )
        }
      </div>
    </div>
    <div class="m-auto w-[720px] max-w-full">
      <slot />
    </div>
  </article>
  <RelatedPosts currentPost={Astro.props} allPosts={allPosts} />
</Layout>
