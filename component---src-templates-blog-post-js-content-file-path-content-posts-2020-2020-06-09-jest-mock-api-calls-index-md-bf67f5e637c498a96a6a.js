"use strict";(self.webpackChunkmaxpou_fr=self.webpackChunkmaxpou_fr||[]).push([[1046],{352:function(n,a,t){t.r(a),t.d(a,{default:function(){return h}});var e=t(1151),s=t(7294);function o(n){const a=Object.assign({p:"p",a:"a",strong:"strong",h2:"h2",span:"span",ul:"ul",li:"li"},(0,e.ah)(),n.components);return s.createElement(s.Fragment,null,s.createElement(a.p,null,"Axios is a very popular library you can use to perform HTTP calls. Because it’s not framework\nspecific, you can easily use it in your Vue.js / React / Vanilla applications."),"\n",s.createElement(a.p,null,"But how do you test your application that has HTTP calls?"),"\n",s.createElement(a.p,null,"When it comes to testing, I always apply this simple rule:\n",s.createElement(a.a,{href:"/10-tips-write-better-tests#4---only-mock-what-you-cant-control"},"“Only mock what you can’t control”"),".\nBecause we usually can’t control an external API, I recommend you to mock it."),"\n",s.createElement(a.p,null,"The first time I had to test a functionality with an API call, I was surprised to see packages on\nnpm for testing Axios calls. ",s.createElement(a.strong,null,"I don’t think we should rely on a npm package for something as simple\nas an API call"),"."),"\n",s.createElement(a.p,null,"Let’s do it without any package!"),"\n",s.createElement(a.h2,{id:"how-to-structure-our-code",style:{position:"relative"}},s.createElement(a.a,{href:"#how-to-structure-our-code","aria-label":"how to structure our code permalink",className:"anchor before"},s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"How to structure our code"),"\n",s.createElement(a.p,null,"I like to have a file where I have all my API calls. In a wink, I can get all the endpoints my\napplication is using."),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/services/swapi.api.js</span>\n<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">\'axios\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getStarship</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://swapi.dev/api/starships/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(a.p,null,"Now in your test, you can do the following:"),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// test/your-test.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getStarships<span class="token punctuation">,</span> getStarship <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../../src/services/swapi.api\'</span>\n<span class="token keyword">import</span> fakeData <span class="token keyword">from</span> <span class="token string">\'../__fixtures__/swapi.getStarship.12.json\'</span>\njest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">\'../../src/services/swapi.api\'</span><span class="token punctuation">)</span>\n\n<span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  getStarship<span class="token punctuation">.</span><span class="token function">mockResolvedValue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> fakeData <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">afterEach</span><span class="token punctuation">(</span>jest<span class="token punctuation">.</span>resetAllMocks<span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(a.p,null,"Here are few interesting points:"),"\n",s.createElement(a.ul,null,"\n",s.createElement(a.li,null,"I usually put my fake data in a ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__fixtures__</code>'}})," folder;"),"\n",s.createElement(a.li,null,"I like to get the URL path the file name;"),"\n",s.createElement(a.li,null,"I use an ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">afterEach()</code>'}})," statement to clean up mocks after each test."),"\n"),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// test/your-test.js</span>\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'should do something\'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">render</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>getStarships<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",s.createElement(a.p,null,"In your test you can, if it makes sense to you, add assertion with this call."),"\n",s.createElement(a.h2,{id:"working-with-code-coverage",style:{position:"relative"}},s.createElement(a.a,{href:"#working-with-code-coverage","aria-label":"working with code coverage permalink",className:"anchor before"},s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Working with code coverage?"),"\n",s.createElement(a.p,null,"Although I think ",s.createElement(a.a,{href:"/code-coverage"},"you shouldn’t pay too much attention to your code coverage"),", you\ncan add the following line in your ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">jest.config.js</code>'}}),":"),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight has-highlighted-lines" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// jest.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">collectCoverageFrom</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'src/**/*.{js,vue}\'</span><span class="token punctuation">,</span>\n<span class="gatsby-highlight-code-line">    <span class="token string">\'!src/services/*.api.js\'</span><span class="token punctuation">,</span></span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(a.p,null,"All files following this pattern in this folder will be ignored!"),"\n",s.createElement(a.p,null,"And that’s it for today :)"))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?s.createElement(a,n,s.createElement(o,n)):o(n)},l=t(4222),c=t(418),r=t(4529),i=t(7953),u=t(4849),k=t(5536),m=t(2404);function g(n){let{data:a,pageContext:t,children:e,location:o}=n;const p=a.post,{previous:g,next:h}=t;return s.createElement(l.Z,{location:o},s.createElement(k.Z,{title:p.frontmatter.title,description:p.frontmatter.description||p.excerpt,cover:p.frontmatter.cover&&p.frontmatter.cover.publicURL,imageShare:p.frontmatter.imageShare&&p.frontmatter.imageShare.publicURL,lang:p.frontmatter.language,translations:p.frontmatter.translations,path:p.frontmatter.slug,isBlogPost:!0}),s.createElement(r.Z,{heroImg:p.frontmatter.cover,title:p.frontmatter.title}),s.createElement(c.Z,null,s.createElement(i.Z,{post:p},e)),s.createElement(c.Z,{as:"aside"},s.createElement(m.Z,{slug:p.frontmatter.slug,title:p.frontmatter.title,redditPostId:p.frontmatter.redditPostId})),s.createElement(u.Z,{previous:g,next:h}))}function h(n){return s.createElement(g,n,s.createElement(p,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-content-posts-2020-2020-06-09-jest-mock-api-calls-index-md-bf67f5e637c498a96a6a.js.map