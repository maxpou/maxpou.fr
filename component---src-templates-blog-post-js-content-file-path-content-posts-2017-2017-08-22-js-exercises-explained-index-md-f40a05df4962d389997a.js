"use strict";(self.webpackChunkmaxpou_fr=self.webpackChunkmaxpou_fr||[]).push([[7279],{5260:function(n,a,s){s.r(a),s.d(a,{default:function(){return d}});var e=s(1151),t=s(7294);function o(n){const a=Object.assign({p:"p",a:"a",br:"br",strong:"strong",h2:"h2",span:"span",blockquote:"blockquote",ol:"ol",li:"li",em:"em",ul:"ul"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"A few weeks ago I found on my twitter feed a very interesting blog post:\n",t.createElement(a.a,{href:"https://performancejs.com/post/hde6d32/The-Best-Frontend-JavaScript-Interview-Questions-%28written-by-a-Frontend-Engineer%29"},"“The Best Frontend JavaScript Interview Questions (written by a Frontend Engineer)”"),"\nwritten by Boris Cherny.",t.createElement(a.br),"\n","As you may guess, the author shows some interesting questions to ask during a job interview.\nQuestions are split in 4 parts: Concepts, Coding, Debugging, and System Design. Here, I’ll focus on\nthe ",t.createElement(a.strong,null,"Debugging")," part."),"\n",t.createElement(a.p,null,"I really like theses question, because they deal with the specificities of JavaScript: object\ncomparison, event loop, scope, this, prototypal inheritance and the equal operator combined with\n",t.createElement(a.a,{href:"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3"},"Abstract Equality Comparison Algorithm"),"."),"\n",t.createElement(a.p,null,"Before reading the solution, I’d recommend you to find the answer by yourself."),"\n",t.createElement(a.h2,{id:"exercise-1",style:{position:"relative"}},t.createElement(a.a,{href:"#exercise-1","aria-label":"exercise 1 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Exercise 1"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"I want this code to log out “hey amy”, but it logs out “hey arnold” - why?"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">==</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'amy\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'hey amy\'</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'hey arnold\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'amy\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement("hr"),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"Answer")),"\n",t.createElement(a.p,null,"Here the problem is the following: ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">{ name: 'amy' } != { name: 'amy' }</code>"}}),". When comparing two objects\nwith equality or strict equality, JavaScript gonna compare the related internal references. Here,\nthese two objects have the same properties and the same value. But in memory, this is 2 different\nobjects."),"\n",t.createElement(a.p,null,"A solution here could be:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'amy\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'hey amy\'</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token string">\'hey arnold\'</span>\n<span class="token punctuation">}</span>\n<span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'amy\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// "hey amy"</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"exercise-2",style:{position:"relative"}},t.createElement(a.a,{href:"#exercise-2","aria-label":"exercise 2 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Exercise 2"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"I want this code to log out the numbers 0, 1, 2, 3 in that order, but it doesn’t do what I expect\n(this is a bug you run into once in a while, and some people love to ask about it in interviews)."),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement("hr"),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"Problem")),"\n",t.createElement(a.p,null,"I like this one because it’s a bit trickier and it deals with scope and the JavaScript Event Loop."),"\n",t.createElement(a.p,null,"The classic pitfall here is the ",t.createElement(a.strong,null,"Zero delays"),". ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setTimeout(callback, 0)</code>'}})," doesn’t mean that the\ncallback will be fire after zero milliseconds."),"\n",t.createElement(a.p,null,"Here’s what happens on the event loop side:"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"Current Call Stack is set to the first setTimeout()."),"\n",t.createElement(a.li,null,"windows.setTimeout() is considered as a Web APIs (for better ",t.createElement(a.strong,null,"Non-Blocking I/O"),"). So the call\nstack sends this part of the code to correct Web APIs. After 0 milliseconds, the callback (here\nan anonymous function) would be sent to the Queue (not to the call stack)."),"\n",t.createElement(a.li,null,"As the call stack is free, for-loop can continue to the second setTimeout …(repeat after we\nmeet this condition i < 4)…"),"\n",t.createElement(a.li,null,"Now the loop is over and ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i === 4</code>'}}),". JS can now execute the callback queue one by one. Each\nconsole.log(i) will print the 4."),"\n"),"\n",t.createElement(a.p,null,"Do you feel lost? I hope this animation will better help you!"),"\n",t.createElement("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/CzXPF3zwWGs",frameborder:"0",allowfullscreen:!0}),"\n",t.createElement(a.p,null,t.createElement(a.em,null,"Animation made with\n",t.createElement(a.a,{href:"http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coIlN0YXJ0ISIpOwoKZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHsKICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgY29uc29sZS5sb2coaSk7CiAgfSwgMCk7Cn0KCmNvbnNvbGUubG9nKCJFbmQhIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D"},"Loupe (try it it’s fun!)"))),"\n",t.createElement(a.p,null,"The second problem is related to scope. The 4 instances of setTimeout function shares the same\ninstance of ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i</code>'}}),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">\'bim\'</span>\n<span class="token comment">//                                ▼ this is a reference to variable foo, not his associated value (\'bim\')</span>\n<span class="token keyword">var</span> <span class="token function-variable function">getFoo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> foo\n<span class="token punctuation">}</span>\nfoo <span class="token operator">=</span> <span class="token string">\'boum\'</span>\n\n<span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \'boum\'</span></code></pre></div>'}}),"\n",t.createElement("hr"),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"Answer")),"\n",t.createElement(a.p,null,"So, there are several solutions available:"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"use an Immediately-Invoked Function Expression ",t.createElement(a.em,null,"a.k.a.")," IIFE. The ‘wrapper function’ will run as\nsoon as she’s defined."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"switch to ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">let</code>'}})," keyword (instead of ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">var</code>'}}),"). This (new?) keyword makes scope a bit more easy to\nunderstand."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n"),"\n"),"\n",t.createElement(a.h2,{id:"exercise-3",style:{position:"relative"}},t.createElement(a.a,{href:"#exercise-3","aria-label":"exercise 3 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Exercise 3"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"I want this code to log out “doggo”, but it logs out undefined!"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'doggo\'</span><span class="token punctuation">,</span>\n  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> sayName <span class="token operator">=</span> dog<span class="token punctuation">.</span>sayName\n<span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement("hr"),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"Answer")),"\n",t.createElement(a.p,null,"The previous code return ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">undefined</code>'}}),". Why? Looks, on the first let condition, we define an object\nwith 2 attributes (name and the function sayName()). Then on the second let, we copy the attribute\nsayName, which is a function into another variable. And then, we call this variable out of her\ncontext (in the global one). The function sayName() will return window.name (global if the\nenvironment is Node). And ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">typeof window.name === "undefined"</code>'}}),"."),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"👎 (the dirty one). If we want to keep the sayName variable. Then we need to bind the dog the\ncontext on it:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token function">sayName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// or:</span>\ndog<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.em,null,"This is dirty, right?")," 🤠"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"👍 call the function directly on her original context"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'doggo\'</span><span class="token punctuation">,</span>\n  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\ndog<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// will log "doggo"</span></code></pre></div>'}}),"\n"),"\n"),"\n",t.createElement(a.h2,{id:"exercise-4",style:{position:"relative"}},t.createElement(a.a,{href:"#exercise-4","aria-label":"exercise 4 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Exercise 4"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"I want my dog to bark(), but instead, I get an error. Why?"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\nDog<span class="token punctuation">.</span><span class="token function-variable function">bark</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">\' says woof\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> fido <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'fido\'</span><span class="token punctuation">)</span>\nfido<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement("hr"),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"Answer")),"\n",t.createElement(a.p,null,"We got the following error ",t.createElement(a.em,null,"TypeError: fido.bark is not a function"),". On the previous code, we set\nthe bark function on another function (",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Dog()</code>'}}),"), which is also a constructor. Is it possible because\nin JavaScript, functions are objects."),"\n",t.createElement(a.p,null,"2 solutions:"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"👎 (the dirty one). fido.bark isn’t a function but ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Dog.bark</code>'}})," is. So let’s use this one and solve\nthe ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," issue with a function.prototype.bind() as in the exercise above:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">var</span> boundedBark <span class="token operator">=</span> Dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>fido<span class="token punctuation">)</span>\n<span class="token function">boundedBark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "fido says woof"</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"But from my point of view using function.prototype.bind() ",t.createElement(a.em,null,"(almost always)")," lead to confusion."),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"👍 set bark() on the Dog’s prototype"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bark</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">\' says woof\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> fido <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'fido\'</span><span class="token punctuation">)</span>\nfido<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "fido says woof"</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"We can also use the class keyword (ES2015) which is just a syntactic sugar to the previous code."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n  <span class="token punctuation">}</span>\n\n  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">\' says woof\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> fido <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">\'fido\'</span><span class="token punctuation">)</span>\nfido<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "fido says woof"</span></code></pre></div>'}}),"\n"),"\n"),"\n",t.createElement(a.h2,{id:"exercise-5",style:{position:"relative"}},t.createElement(a.a,{href:"#exercise-5","aria-label":"exercise 5 permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Exercise 5"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"Why does this code return the results that it does?"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isBig</span><span class="token punctuation">(</span><span class="token parameter">thing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>thing <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> thing <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> thing <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span>\n<span class="token function">isBig</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">isBig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">isBig</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre></div>'}}),"\n",t.createElement("hr"),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"Answer")),"\n",t.createElement(a.p,null,"We are using here the simple equality operator (",t.createElement(a.em,null,"e.g.")," ==) by opposition to strict comparison\n(",t.createElement(a.em,null,"e.g.")," ===). With this operator, it’s not mandatory to compare the same type."),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">isBig(1)</code>'}})," pass the condition ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">thing == 1</code>'}})," as expected."),"\n",t.createElement(a.li,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">isBig([2])</code>'}})," will pass the condition ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">thing == 2</code>'}}),". When comparing an array to a number, the array\nwill be converted to a number. This is a part of the\n",t.createElement(a.a,{href:"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3"},"Abstract Equality Comparison Algorithm"),".\nAccording to this algorithm, if we compare a number with an Object ",t.createElement(a.em,null,"(reminder: arrays are object\nin JS)"),", this array will be converted to an array. Here, there is only one item inside so\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[2] == 2</code>'}}),"."),"\n"),"\n",t.createElement(a.p,null,"Because this algorithm is obscure for the most common developers, we should avoid this operator\n(",t.createElement(a.a,{href:"http://eslint.org/docs/rules/eqeqeq"},"ESLint eqeqeq rule is your friend 👍"),")."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// weird results</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment">// true</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span>   <span class="token comment">// true</span>\n\n<span class="token comment">// Non transitive relation</span>\n<span class="token string">"1"</span> <span class="token operator">==</span> <span class="token boolean">true</span>   <span class="token comment">// true</span>\n<span class="token string">"01"</span> <span class="token operator">==</span> <span class="token boolean">true</span>  <span class="token comment">// true</span>\n<span class="token string">"01"</span> <span class="token operator">==</span> <span class="token string">"1"</span>   <span class="token comment">// false</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"exercise-6-bonus",style:{position:"relative"}},t.createElement(a.a,{href:"#exercise-6-bonus","aria-label":"exercise 6 bonus permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Exercise 6 (bonus)"),"\n",t.createElement(a.blockquote,null,"\n",t.createElement(a.p,null,"How to preserve the immutability on my heroes list?"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> heroes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Wolverine\'</span><span class="token punctuation">,</span> <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">\'Marvel\'</span><span class="token punctuation">,</span> <span class="token literal-property property">isEvil</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Deadpool\'</span><span class="token punctuation">,</span> <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">\'Marvel\'</span><span class="token punctuation">,</span> <span class="token literal-property property">isEvil</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Magneto\'</span><span class="token punctuation">,</span> <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">\'Marvel\'</span><span class="token punctuation">,</span> <span class="token literal-property property">isEvil</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Charles Xavier\'</span><span class="token punctuation">,</span> <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">\'Marvel\'</span><span class="token punctuation">,</span> <span class="token literal-property property">isEvil</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Batman\'</span><span class="token punctuation">,</span> <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">\'DC Comics\'</span><span class="token punctuation">,</span> <span class="token literal-property property">isEvil</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Harley Quinn\'</span><span class="token punctuation">,</span> <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">\'DC Comics\'</span><span class="token punctuation">,</span> <span class="token literal-property property">isEvil</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Legolas\'</span><span class="token punctuation">,</span> <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">\'Tolkien\'</span><span class="token punctuation">,</span> <span class="token literal-property property">isEvil</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Gandalf\'</span><span class="token punctuation">,</span> <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">\'Tolkien\'</span><span class="token punctuation">,</span> <span class="token literal-property property">isEvil</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'Saruman\'</span><span class="token punctuation">,</span> <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">\'Tolkien\'</span><span class="token punctuation">,</span> <span class="token literal-property property">isEvil</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> newHeroes <span class="token operator">=</span> heroes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">h</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  h<span class="token punctuation">.</span>name <span class="token operator">=</span> h<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> h\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Do you have any idea? 🙂",t.createElement(a.br),"\n",t.createElement(a.em,null,"The answer will be in the next post!")))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)},l=s(4222),c=s(418),r=s(4529),i=s(7953),u=s(4849),k=s(5536),m=s(2404);function g(n){let{data:a,pageContext:s,children:e,location:o}=n;const p=a.post,{previous:g,next:d}=s;return t.createElement(l.Z,{location:o},t.createElement(k.Z,{title:p.frontmatter.title,description:p.frontmatter.description||p.excerpt,cover:p.frontmatter.cover&&p.frontmatter.cover.publicURL,imageShare:p.frontmatter.imageShare&&p.frontmatter.imageShare.publicURL,lang:p.frontmatter.language,translations:p.frontmatter.translations,path:p.frontmatter.slug,isBlogPost:!0}),t.createElement(r.Z,{heroImg:p.frontmatter.cover,title:p.frontmatter.title}),t.createElement(c.Z,null,t.createElement(i.Z,{post:p},e)),t.createElement(c.Z,{as:"aside"},t.createElement(m.Z,{slug:p.frontmatter.slug,title:p.frontmatter.title,redditPostId:p.frontmatter.redditPostId})),t.createElement(u.Z,{previous:g,next:d}))}function d(n){return t.createElement(g,n,t.createElement(p,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-content-posts-2017-2017-08-22-js-exercises-explained-index-md-f40a05df4962d389997a.js.map