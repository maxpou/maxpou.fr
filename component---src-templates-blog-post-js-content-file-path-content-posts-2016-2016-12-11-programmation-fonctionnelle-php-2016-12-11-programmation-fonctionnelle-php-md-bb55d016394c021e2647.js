"use strict";(self.webpackChunkmaxpou_fr=self.webpackChunkmaxpou_fr||[]).push([[4501],{2246:function(n,a,s){s.r(a),s.d(a,{default:function(){return h}});var e=s(1151),t=s(7294);function p(n){const a=Object.assign({p:"p",strong:"strong",em:"em",a:"a",h2:"h2",span:"span",ul:"ul",li:"li",br:"br",img:"img"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"Depuis quelque temps, j’entends de plus en plus parler d’un autre paradigme de programmation : la\n",t.createElement(a.strong,null,"programmation fonctionnelle")," (ou ",t.createElement(a.em,null,"PF")," pour les intimes). Bon, je ne vais pas vous faire une\nintroduction à la programmation fonctionnelle, des\n",t.createElement(a.a,{href:"https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536"},"articles"),"/conférences\nsur la toile le font très bien. L’idée est plutôt de reprendre des concepts clefs et voir ce que\nl’on peut en faire avec dans notre merveilleux monde de PHP."),"\n",t.createElement(a.h2,{id:"immuabilité-ou-immutabilité",style:{position:"relative"}},t.createElement(a.a,{href:"#immuabilit%C3%A9-ou-immutabilit%C3%A9","aria-label":"immuabilité ou immutabilité permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Immuabilité (ou immutabilité)"),"\n",t.createElement(a.p,null,"Une variable est une valeur qui peut être amenée à être modifiée dans le temps. Elle va ",t.createElement(a.em,null,"varier"),", en\npassant d’un état à un autre. Un des concepts clefs de la PF est de supprimer cette notion de temps\n(d’état) ou du moins, de la minimiser. On va parler d’",t.createElement(a.strong,null,"immuabilité"),"."),"\n",t.createElement(a.p,null,"Ce qui veut dire, exit les variables à qui on assigne un entier puis un tableau… un peu comme ceci\n:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$wtf</span>  <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token variable">$wtf</span> <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token comment">// puis plus loin</span>\n<span class="token variable">$wtf</span>  <span class="token operator">=</span> <span class="token string double-quoted-string">"cinq"</span><span class="token punctuation">;</span>\n<span class="token comment">// et enfin</span>\n<span class="token variable">$wtf</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Banana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Il en va de même pour les enrichissements de tableaux dans des boucles… pensez ",t.createElement(a.strong,null,"stateless")," !"),"\n",t.createElement(a.p,null,"Dans PHP, le support des variables immuables n’est pas dingue-dingue. On va avoir :"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://php.net/manual/en/function.define.php"},"define")," : qui associera à un nom une constante au\nmoment de l’exécution;"),"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://php.net/manual/en/language.oop5.constants.php"},"const")," : pour les constantes de classe.\nAttention, ces constantes ne peuvent pas être déclarées de manière dynamique (dans un if)."),"\n"),"\n",t.createElement(a.p,null,"Autant const est intéressante, mais define elle est différente car l’assignation se fait via une\nfonction. D’un point de vue personnel, j’ai du mal à m’affranchir du bon vieux ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$maVariable</code>'}}),". Donc\nune fois que ma variable est assignée, je n’y touche plus (mais rien ne m’assure que c’est vrai)."),"\n",t.createElement(a.h2,{id:"immuabilité-et-porté-des-variables",style:{position:"relative"}},t.createElement(a.a,{href:"#immuabilit%C3%A9-et-port%C3%A9-des-variables","aria-label":"immuabilité et porté des variables permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Immuabilité et porté des variables"),"\n",t.createElement(a.p,null,"En PHP, la portée d’une variable de s’étend pas jusque dans une fonction. Ce qui veut dire que si\nvous tentez d’exécuter ce bout de code:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$ten</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function-definition function">someFunction</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token variable">$value</span> <span class="token operator">+</span> <span class="token variable">$ten</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Un message d’erreur de type notice renverra ceci: ",t.createElement(a.strong,null,"Notice: Undefined variable: ten in myscript.php\non line 5"),". En effet, la variable ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$ten</code>'}})," n’est pas accessible dans le scope de la fonction (pas\ncomme en JS!)."),"\n",t.createElement(a.p,null,"Pour accéder à la variable ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$ten</code>'}})," à l’intérieur de la fonction, il faudra utiliser le système de\nClosure (une fonction lambda qui peut accéder à des éléments extérieurs à son scope de création) :"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$ten</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n<span class="token variable">$someFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$ten</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$ten</span> <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token variable">$value</span> <span class="token operator">+</span> <span class="token variable">$ten</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">echo</span> <span class="token variable">$someFunction</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 33</span>\n<span class="token keyword">echo</span> <span class="token variable">$ten</span><span class="token punctuation">;</span>              <span class="token comment">// 10</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Note: la variable ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$ten</code>'}})," est passée par valeur. Pour la passer par référence, il faut utiliser le\nsymbole ",t.createElement(a.strong,null,"&")," comme ceci : ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&amp;$ten</code>'}})," lors de la déclaration de la variable dans la fonction. Le\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">echo $ten</code>'}})," renverra alors 21 mais surtout, le code perdra son immuabilité."),"\n",t.createElement(a.p,null,"Vous noterez que c’est sur ce système de closure que s’appuient les frameworks\n",t.createElement(a.a,{href:"http://silex.sensiolabs.org/doc/master/usage.html#example-get-route"},"Silex")," et\n",t.createElement(a.a,{href:"https://laravel.com/docs/5.1/routing#basic-routing"},"Laravel")," pour leurs systèmes de routing."),"\n",t.createElement(a.h2,{id:"immuabilité-et-objets",style:{position:"relative"}},t.createElement(a.a,{href:"#immuabilit%C3%A9-et-objets","aria-label":"immuabilité et objets permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Immuabilité et Objets"),"\n",t.createElement(a.p,null,"Il n’y a rien de plus facile que de faire évoluer une variable en PHP. Mais qu’en est-il pour nos\nobjets ?",t.createElement(a.br),"\n","Et bien, le concept d’immuabilité n’existe pas non plus en PHP OO. On aurait vite tendance à croire\nqu’en mettant un attribut final à une classe et en supprimant les setters, le tour est joué… mais\nen PHP, on peut appeler un constructeur autant de fois que l’on veut !"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Fruit</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token variable">$fruit</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'Banana\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$fruit</span><span class="token operator">-></span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'Kiwi\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"On pourrait aussi rendre le constructeur privé… mais avec la\n",t.createElement(a.a,{href:"http://php.net/manual/en/class.reflectionclass.php"},"réflexion")," le concept d’immuabilité en OO est\ndevenu complètement impossible :"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$fruit</span>       <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'Banana\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$refObject</span>   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionObject</span><span class="token punctuation">(</span><span class="token variable">$fruit</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$refProperty</span> <span class="token operator">=</span> <span class="token variable">$refObject</span><span class="token operator">-></span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'name\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$refProperty</span><span class="token operator">-></span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$refProperty</span><span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token variable">$fruit</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">\'Apple\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Bref, l’immuabilité est donc juste une histoire de conventions."),"\n",t.createElement(a.h2,{id:"récursion",style:{position:"relative"}},t.createElement(a.a,{href:"#r%C3%A9cursion","aria-label":"récursion permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Récursion"),"\n",t.createElement(a.img,{src:"/03b55b3618d31a59b53f5dcc03ca0866/loop.gif",alt:"loop"}),"\n",t.createElement(a.p,null,"Quand il y a dans votre code une notion de parenté qui s’étend à plusieurs niveaux, il peut-être\nintéressant de créer des fonctions qui s’appelleront elles-même. On va en trouver dans différents\ncas d’usage : fonctions mathématiques (exemple ci-après avec la suite de Fibonacci), rechercher un\nfichier dans un file system… C’est une bonne alternative aux bons vieux while/for bien crades (qui\nutilisent des variables)."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">function</span> <span class="token function-definition function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token variable">$n</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$n</span> <span class="token punctuation">:</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Notez cependant qu’utiliser la récursion peut s’évérer assez gourmande en ressources si la fonction\ns’appelle elle-même un très grand nombre de fois. Attention aussi aux boucles infinies :) ",t.createElement(a.em,null,"(une fois\nsur deux j’oublie le return et c’est la catastrophe !)")),"\n",t.createElement(a.h2,{id:"fonction-de-premier-ordre-et-fonction-dordre-supérieur",style:{position:"relative"}},t.createElement(a.a,{href:"#fonction-de-premier-ordre-et-fonction-dordre-sup%C3%A9rieur","aria-label":"fonction de premier ordre et fonction dordre supérieur permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Fonction de premier ordre et fonction d’ordre supérieur"),"\n",t.createElement(a.p,null,"PHP supporte depuis PHP 5.3 (2009), les fonctions de première classe ",t.createElement(a.em,null,"(first-class functions)"),". Ce\nqui veut dire que l’on peut attribuer une fonction à une variable. Une fonction d’ordre supérieur\n",t.createElement(a.em,null,"(high order function)")," est une fonction qui peut accepter au moins une fonction comme paramètre\net/ou retourner une autre fonction (callable)."),"\n",t.createElement(a.p,null,"Exemple:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$addTen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token variable">$item</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token variable">$addTen</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//42</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"L’intérêt de ce type de fonctions, c’est que vos fonctions seront plus composables, paramétrables et\nréutilisables (et aussi faciles à tester !). On pourra aussi facilement les coupler avec des\nfonctions de type :"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://php.net/manual/en/function.array-map.php"},"array_map")," : pour parcourir le tableau et\nappliquer une transformation à chacun des éléments. Conserve l’ordre et ne supprime pas les\nvaleurs;"),"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://php.net/manual/en/function.array-filter.php"},"array_filter")," : pour supprimer des entrées.\nConserve l’ordre et les valeurs;"),"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://php.net/manual/en/function.array-reduce.php"},"array_reduce")," : pour réduire le tableau à une\nseule valeur."),"\n"),"\n",t.createElement(a.p,null,"Exemple:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token variable">$inputAddTen</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$addTen</span><span class="token punctuation">,</span> <span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [11, 12, 13, 14, 15, 16]</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Si vous êtes perdus, voici une petite anti-sèche:"),"\n",t.createElement("blockquote",{class:"twitter-tweet","data-lang":"fr"},t.createElement("p",{lang:"en",dir:"ltr"},"Map/filter/reduce in a tweet:",t.createElement("br"),t.createElement("br"),"map([🌽, 🐮, 🐔], cook)",t.createElement("br"),"=> [🍿, 🍔, 🍳]",t.createElement("br"),t.createElement("br"),"filter([🍿, 🍔, 🍳], isVegetarian)",t.createElement("br"),"=>  [🍿, 🍳]",t.createElement("br"),t.createElement("br"),"reduce([🍿, 🍳], eat)",t.createElement("br"),"=> 💩"),"— Steven Luscher (@steveluscher) ",t.createElement("a",{href:"https://twitter.com/steveluscher/status/741089564329054208"},"10 juin 2016")),"\n",t.createElement("script",{async:!0,src:"//platform.twitter.com/widgets.js",charset:"utf-8"}),"\n",t.createElement(a.p,null,"Autre utilisation des fonctions d’ordre supérieur : créer une fonction qui retourne une fonction."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">function</span> <span class="token function-definition function">greaterThan</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">callable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">boolean</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$m</span> <span class="token operator">></span> <span class="token variable">$n</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token variable">$greaterThan10</span> <span class="token operator">=</span> <span class="token function">greaterThan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$greaterThan10</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>\n<span class="token variable">$greaterThan10</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Bon par contre ",t.createElement(a.strong,null,"deux points noirs")," :"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"dans ces fonctions, la position du callback est différente d’une fonction à l’autre :\narray_filter($array, ",t.createElement(a.strong,null,"$callback"),") et array_map(**$callback**, $array);"),"\n",t.createElement(a.li,null,"le chaînage n’est pas possible et sa variante n’est vraiment pas sexy :"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$addTen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token variable">$item</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token variable">$isEven</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token variable">$v</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$addTen</span><span class="token punctuation">,</span>\n          <span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$isEven</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"fonctions-pures",style:{position:"relative"}},t.createElement(a.a,{href:"#fonctions-pures","aria-label":"fonctions pures permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Fonctions pures"),"\n",t.createElement(a.p,null,"La notion de pureté est très importante car elle permet d’éviter les effets de bord ",t.createElement(a.em,null,"(side\neffects)"),". Elle devra donc renvoyer toujours le même lorsqu’on l’appelle avec les mêmes arguments.\nElle ne doit donc pas interagir avec des devices d’I/O ou même des éléments mémoire."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$myNumber</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">global</span> <span class="token variable">$myNumber</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token variable">$myNumber</span> <span class="token operator">=</span> <span class="token variable">$myNumber</span> <span class="token operator">+</span> <span class="token variable">$number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">echo</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//6</span>\n<span class="token keyword">echo</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Cette fonction n’est pas pure car elle ne renvoie pas toujours le même résultat pour le même\nparamètre d’entrée."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">function</span> <span class="token function-definition function">sum</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token variable">$logger</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'logger\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$logger</span><span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'sum\'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span>\n<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Cette fonction n’est en effet pas pure car elle interagit avec un élément d’I/O, à savoir : le\nlogger. Bon du coup si on supprime le logger, on peut dire que cette fonction est pure. Vous l’aurez\ncompris, une fonction pure va de pair avec l’acronyme ",t.createElement(a.em,null,"KISS (Keep It Simple, Stupid)"),". Comme vu dans\nla partie sur l’immuabilité, PHP nous protège pas mal des effets de bord. Essayez donc au maximum de\nmettre un maximum de fonctions pures dans votre code et de limiter celles avec des effets de bord.\nVous gagnerez grandement en testabilité !"),"\n",t.createElement(a.p,null,"Pour les développeurs OO, il faudra aussi éviter de trop jouer avec le ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$this</code>'}}),"."),"\n",t.createElement(a.h2,{id:"mémoization",style:{position:"relative"}},t.createElement(a.a,{href:"#m%C3%A9moization","aria-label":"mémoization permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Mémoization"),"\n",t.createElement(a.p,null,"Parfois on a des calculs assez conséquents au sein d’une fonction et cette dernière est susceptible\nd’être rappelée ultérieurement avec les mêmes paramètres. C’est à ce moment que le concept de\nmémoization entre en jeu. Pour éviter de patienter une deuxième fois pour un calcul déjà fait, il\nest possible de créer un ",t.createElement(a.strong,null,"pseudo-cache à l’intérieur même de votre fonction"),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$memoMD5</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token variable">$cache</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$cache</span><span class="token punctuation">[</span><span class="token variable">$value</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"memoize - "</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token variable">$cache</span><span class="token punctuation">[</span><span class="token variable">$value</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//imaginez ici un long calcul</span>\n    <span class="token variable">$cache</span><span class="token punctuation">[</span><span class="token variable">$value</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token variable">$cache</span><span class="token punctuation">[</span><span class="token variable">$value</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">echo</span> <span class="token variable">$memoMD5</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// affiche après ~5s: c4ca4238a0b923820dcc509a6f75849b</span>\n<span class="token keyword">echo</span> <span class="token variable">$memoMD5</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// affiche après ~5s: c81e728d9d4c2f636f067f89cc14862c</span>\n<span class="token keyword">echo</span> <span class="token variable">$memoMD5</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// affiche après ~0s: memoize - c4ca4238a0b923820dcc509a6f75849b</span></span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"le-mot-de-la-fin",style:{position:"relative"}},t.createElement(a.a,{href:"#le-mot-de-la-fin","aria-label":"le mot de la fin permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Le mot de la fin"),"\n",t.createElement(a.p,null,"Je n’ai pas abordé tous les concepts de la PF dans cet article. Sachez qu’il existe des solutions\n",t.createElement(a.em,null,"full-PHP")," qui implémentent les concepts de ",t.createElement(a.a,{href:"https://github.com/ircmaxell/monad-php"},"monad"),",\n",t.createElement(a.a,{href:"https://github.com/matteosister/php-curry"},"currying"),"…"),"\n",t.createElement(a.p,null,"PHP n’est pas vraiment le meilleur langage qui se prête à la programmation fonctionnelle. Écrire\navec un style fonctionnel ne sera pas aussi propre à lire qu’en JavaScript (surtout depuis ES6),\nScala, Haskell… Mais ce n’est pas pour autant qu’il faut le laisser de côté ce paradigme."),"\n",t.createElement(a.p,null,"Par exemple, entre ces deux exemples, je préfère de loin celui qui adopte un style\nfonctionnel :"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="php"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// style procédural</span>\n<span class="token variable">$odds</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token variable">$odds</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$input</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// style fonctionnel</span>\n<span class="token variable">$odds</span> <span class="token operator">=</span> <span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token variable">$v</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Vous améliorerez grandement la qualité de votre en utilisant des variables immuables et des\nfonctions pures. La récursion est très utile, même si elle peut s’avérer triviale lors de débug.\nPour le reste, c’est au cas par cas."),"\n",t.createElement(a.p,null,t.createElement(a.strong,null,"Mais pourquoi est-ce si étranger en PHP ?")),"\n",t.createElement(a.p,null,"Adopter un style fonctionnel est nécessaire dans un langage où les zones mémoires peuvent être\npartagées. C’est d’ailleurs pour celà que l’immuabilité et la pureté des fonctions sont si\nprimordiales.",t.createElement(a.br),"\n","PHP a été conçu pour afficher des pages web en un temps inférieur à 1s. Une fois que la page est\nchargée, toute la mémoire qui a été nécessaire pour afficher la page disparaît. On est dans une\n",t.createElement(a.strong,null,"Share Nothing Architecture"),", ce qui veut dire que chaque processus qui est chargé d’afficher une\npage en PHP ne va pas partager sa mémoire avec un autre (pas comme en Java où certains threads\npartagent de la mémoire).",t.createElement(a.br),"\n","C’est pour ces raisons que l’on entend si peu parler de Programmation Fonctionnelle en PHP."))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},l=s(4222),c=s(418),r=s(4529),u=s(7953),i=s(4849),k=s(5536),m=s(2404);function d(n){let{data:a,pageContext:s,children:e,location:p}=n;const o=a.post,{previous:d,next:h}=s;return t.createElement(l.Z,{location:p},t.createElement(k.Z,{title:o.frontmatter.title,description:o.frontmatter.description||o.excerpt,cover:o.frontmatter.cover&&o.frontmatter.cover.publicURL,imageShare:o.frontmatter.imageShare&&o.frontmatter.imageShare.publicURL,lang:o.frontmatter.language,translations:o.frontmatter.translations,path:o.frontmatter.slug,isBlogPost:!0}),t.createElement(r.Z,{heroImg:o.frontmatter.cover,title:o.frontmatter.title}),t.createElement(c.Z,null,t.createElement(u.Z,{post:o},e)),t.createElement(c.Z,{as:"aside"},t.createElement(m.Z,{slug:o.frontmatter.slug,title:o.frontmatter.title,redditPostId:o.frontmatter.redditPostId})),t.createElement(i.Z,{previous:d,next:h}))}function h(n){return t.createElement(d,n,t.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-content-posts-2016-2016-12-11-programmation-fonctionnelle-php-2016-12-11-programmation-fonctionnelle-php-md-bb55d016394c021e2647.js.map